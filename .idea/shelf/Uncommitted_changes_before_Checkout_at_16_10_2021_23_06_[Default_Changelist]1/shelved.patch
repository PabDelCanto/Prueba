Index: app/src/main/java/org/bedu/bedushop/Shop.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bedu.bedushop\r\n\r\nimport android.animation.AnimatorInflater\r\nimport android.app.ActivityOptions\r\nimport android.content.Context\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.AttributeSet\r\nimport androidx.fragment.app.Fragment\r\n//import androidx.navigation.findNavController\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.transition.TransitionInflater\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.*\r\nimport androidx.core.app.ActivityOptionsCompat\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.isVisible\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.material.progressindicator.LinearProgressIndicator\r\nimport io.realm.Realm\r\nimport kotlinx.android.synthetic.main.recycler_perfil.*\r\n\r\n//Asignamos nuevas variables globales\r\nconst val USER_EMAIL_SHOP = \"org.bedu.bedushop.USER_EMAIL_SHOP\"\r\nconst val USER_FULL_NAME_SHOP = \"org.bedu.bedushop.USER_FULL_NAME_SHOP\"\r\nconst val USER_AVATAR_SHOP = \"org.bedu.bedushop.USER_AVATAR_SHOP\"\r\n\r\nclass Shop : AppCompatActivity() {\r\n\r\n    private  var usuarioFragment= UsuarioFragment()\r\n    private  var listaFragment= ListadoFragment()\r\n    private  var carritoFragment= CarritoFragment()\r\n    private lateinit var menuSuperior: Menu\r\n    private lateinit var progressBar: LinearProgressIndicator\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_shop)\r\n        progressBar=findViewById(R.id.loadingBar)\r\n\r\n\r\n\r\n\r\n        //!! Transition sin terminar para el detail\r\n       val transitionXml = TransitionInflater.from(this).inflateTransition(R.transition.descripcion).apply {\r\n            excludeTarget(window.decorView.findViewById<View>(R.id.action_bar_container), true)\r\n            excludeTarget(android.R.id.statusBarBackground, true)\r\n            excludeTarget(android.R.id.navigationBarBackground, true)\r\n        }\r\n        window.exitTransition = transitionXml\r\n        //!! Transition sin terminar para el detail\r\n\r\n\r\n\r\n        /*Inicializa frament segun su origen\r\n        * Se es por Inicio seccion o registrar o DETAIL*/\r\n        val origen : String = intent.getStringExtra(\"origen\").toString()\r\n        if(origen == \"DETAIL\"){\r\n            replaceFragment(carritoFragment, null)\r\n\r\n            Toast.makeText(this, \"Producto Agregado\", Toast.LENGTH_SHORT).show()\r\n        }\r\n        else{\r\n            replaceFragment(listaFragment, null)\r\n        }\r\n\r\n\r\n        /*Controlador del navegador\r\n        * Dependiendo lo que seleccione el usuario en el Bottom Nav te envia a dicho fragment*/\r\n        val bottomNavigation = findViewById<BottomNavigationView>(R.id.bottom_navigation)\r\n        bottomNavigation.setOnNavigationItemSelectedListener {\r\n                item ->\r\n            when (item.itemId) {\r\n                R.id.menu_carrito -> {\r\n                    loading(progressBar)\r\n                    replaceFragment(carritoFragment, null)\r\n                    true\r\n                }\r\n\r\n                R.id.menu_usuario -> {\r\n                    loading(progressBar)\r\n                    var bundle = intent.extras //Recuperamos datos de bundle\r\n                    val email = bundle?.getString(USER_EMAIL)\r\n                    val fullName = bundle?.getString(USER_FULL_NAME)\r\n                    val avatar = bundle?.getString(USER_AVATAR)\r\n\r\n                    var bundleFrag = Bundle()//Reasignamos datos de bundle\r\n                    bundleFrag.putString(USER_EMAIL_SHOP, email)\r\n                    bundleFrag.putString(USER_FULL_NAME_SHOP, fullName)\r\n                    bundleFrag.putString(USER_AVATAR_SHOP,avatar)\r\n                    Log.d(\"Bundle Shop\", bundleFrag.toString())\r\n                    replaceFragment(usuarioFragment, bundleFrag)\r\n                    true\r\n                }\r\n                R.id.ic_inicio -> {\r\n                    loading(progressBar)\r\n                    replaceFragment(listaFragment, null)\r\n                    true\r\n                }\r\n                else -> {\r\n                    false\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        /*Iniciar actividad Detail*/\r\n\r\n        listaFragment.setListener{\r\n            val detailFragment = supportFragmentManager.findFragmentById(R.id.fragmentDetail) as? DetailFragment\r\n\r\n            // Pantalla grande, mostrar detalle en el fragment\r\n            if(detailFragment!=null){\r\n                detailFragment.showProduct(it)\r\n            } else{ //pantalla pequeña, navegar a un nuevo Activity\r\n                val intent = Intent(this, DetailActivity::class.java)\r\n\r\n\r\n                //!! Transition sin terminar para el detail\r\n\r\n               // EN ESTA SECCION PROBE DE USAR SHARED TRANSITION PERO NO ME GUSTO EL RESULTADO, PREGUNTAR A JAVI\r\n\r\n               /* val options = ViewCompat.getTransitionName(findViewById(R.id.cardviewLista))?.let {\r\n                    ActivityOptionsCompat.makeSceneTransitionAnimation(\r\n                        this, findViewById(R.id.cardviewLista), it\r\n                    )\r\n                }*/\r\n\r\n                startActivity(intent, ActivityOptions.makeSceneTransitionAnimation(this).toBundle())\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n        override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n            // Handle item selection\r\n            return when (item.itemId) {\r\n                R.id.search -> {\r\n                    Toast.makeText(this, \"Función no disponible\", Toast.LENGTH_SHORT).show()\r\n                    true\r\n\r\n                }\r\n                R.id.help -> {\r\n                    val url = \"https://www.bedu.org\"\r\n                    val i = Intent(Intent.ACTION_VIEW)\r\n                    i.data = Uri.parse(url)\r\n                    startActivity(i)\r\n                    true\r\n                }\r\n                else -> super.onOptionsItemSelected(item)\r\n            }\r\n        }\r\n        // Funcion que te levanta el fragment que se pasa por parametro\r\n        private fun replaceFragment(fragment: Fragment, bundle:Bundle?){\r\n            fragment.arguments = bundle//Enviamos Bundle, de existir\r\n            val trans = supportFragmentManager.beginTransaction()\r\n            trans.replace(R.id.fragemento_contenedor, fragment)\r\n            trans.addToBackStack(null)\r\n            trans.commit()\r\n        }\r\n        override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n            val inflater: MenuInflater = menuInflater\r\n            inflater.inflate(R.menu.menu_superior, menu)\r\n            return true\r\n        }\r\n\r\n    //funcion para activar la barrita de loading en los diferentes fragments\r\n        private fun loading(progressBar: LinearProgressIndicator){\r\n            progressBar.isVisible=true\r\n            AnimatorInflater.loadAnimator(this, R.animator.loading_bar).apply {\r\n                setTarget(progressBar)\r\n                start()\r\n            }\r\n\r\n            }\r\n\r\n    //Para leer un archivo y devolver cadena de texto\r\n\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/org/bedu/bedushop/Shop.kt b/app/src/main/java/org/bedu/bedushop/Shop.kt
--- a/app/src/main/java/org/bedu/bedushop/Shop.kt	
+++ b/app/src/main/java/org/bedu/bedushop/Shop.kt	
@@ -115,9 +115,7 @@
             val detailFragment = supportFragmentManager.findFragmentById(R.id.fragmentDetail) as? DetailFragment
 
             // Pantalla grande, mostrar detalle en el fragment
-            if(detailFragment!=null){
-                detailFragment.showProduct(it)
-            } else{ //pantalla pequeña, navegar a un nuevo Activity
+
                 val intent = Intent(this, DetailActivity::class.java)
 
 
@@ -133,7 +131,7 @@
 
                 startActivity(intent, ActivityOptions.makeSceneTransitionAnimation(this).toBundle())
             }
-        }
+
 
 
     }
